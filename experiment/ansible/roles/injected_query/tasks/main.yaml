# vim: set filetype=yaml.ansible :
---
- name: Ensure that the directory to dump the manifest exist
  ansible.builtin.file:
    path: "{{ base_path }}/{{ variant_name }}/manifests"
    state: directory
    mode: 0755

- name: Inject and query
  vars:
    service: "{{ variant_type }}-{{ identifier }}"
    fault_name: "{{ service }}_{{ fault.type }}_{{ fault.version }}"
    injection_manifest_dir:  "{{ base_path }}/{{ variant_name }}/manifests/{{ fault_name }}"
  block:
    - name: Ensure that the directory to generate the template exist
      ansible.builtin.file:
        path: "{{ injection_manifest_dir }}"
        state: directory
        mode: 0755

    - name: Genereate injection manifest from template
      ansible.builtin.template:
        src: injection_manifest.yaml.j2 
        dest: "{{ injection_manifest_dir }}/injection_manifest.yaml"
        mode: 0755
      vars:
        namespace: "{{ variant_name }}"

    - name: Deploy injection
      changed_when: true
      ansible.builtin.command:
        cmd: kubectl apply -f injection_manifest.yaml
        chdir: "{{ injection_manifest_dir }}"
      tags:
        - deploy

    - name: Indicate Injection for cleanup
      ansible.builtin.set_fact:
        injected: true
          
    - name: Sleep for 30 seconds to wait for deployments to complete
      ansible.builtin.wait_for:
        timeout: 10
      tags:
        - sleep

    - name: Sleep during the fault injection
      ansible.builtin.wait_for:
        timeout: "{{ fault.duration }}"
      tags:
        - sleep

    - name: Get interval end time
      ansible.builtin.command:
        cmd: date +%s
      register: sleep_end

    - name: Query traces
      ansible.builtin.include_role:
        name: query_tracerca
      vars:
        interval: "{{ fault.duration + 10 }}"
        subdir: injected
        filename: "{{ fault_name }}.pkl" 
        append: false
        end_time: "{{ sleep_end.stdout }}"

    - name: Set output dir name as a fact
      ansible.builtin.set_fact:
        output_dir: "{{ base_path }}/{{ variant_name }}/datasets/microrca/{{ fault_name }}"

    - name: Ensure that the injected query results directory exits
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: 0755

    - name: Copy uninjected data to injection query results dir for concatenation
      ansible.builtin.copy:
        src: "{{ base_path }}/{{ variant_name }}/datasets/microrca/uninjected/"
        dest: "{{ output_dir }}/"

    - name: Query microrca_metrics
      ansible.builtin.include_role:
        name: query_microrca
      vars:
        interval: "{{ fault.duration + 10 }}"
        subdir: "{{ fault_name }}"
        end_time: "{{ sleep_end.stdout }}"

  rescue:
    - name: Note failed task
      ansible.builtin.lineinfile:
        path: "{{ base_path }}/failed"
        line: "FAILED:{{ variant_name }}:{{ ansible_failed_task }}"
        create: yes

  always:
    - name: Delete injection
      changed_when: true
      when: injected
      ansible.builtin.command:
        cmd: kubectl delete -f injection_manifest.yaml
        chdir: "{{ injection_manifest_dir }}"
      tags:
        - deploy

    - name: reset Injection for cleanup
      ansible.builtin.set_fact:
        injected: false

    - name: Get the execution end time
      register: date_now
      ansible.builtin.command: date

    - name: Note the time
      ansible.builtin.lineinfile:
        path: "{{ base_path }}/log"
        line: "{{ variant_name }} injection query: {{ date_now.stdout }}"
        create: yes

